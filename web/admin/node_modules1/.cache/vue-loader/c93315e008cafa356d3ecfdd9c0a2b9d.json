{"remainingRequest":"/Users/jimmy_c/go/src/awesomeProject3/web/admin/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jimmy_c/go/src/awesomeProject3/web/admin/src/components/common/Editormd.vue?vue&type=style&index=2&lang=css&","dependencies":[{"path":"/Users/jimmy_c/go/src/awesomeProject3/web/admin/src/components/common/Editormd.vue","mtime":1622954682814},{"path":"/Users/jimmy_c/go/src/awesomeProject3/web/admin/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jimmy_c/go/src/awesomeProject3/web/admin/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/jimmy_c/go/src/awesomeProject3/web/admin/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/jimmy_c/go/src/awesomeProject3/web/admin/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jimmy_c/go/src/awesomeProject3/web/admin/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCi5lZGl0b3JtZC1wcmV2aWV3LWNvbnRhaW5lciB7CiAgbWluLWhlaWdodDogNjAlOwp9Ci5tYXJrZG93bi1ib2R5IGgxIHsKICBmb250LXNpemU6IDEuOGVtICFpbXBvcnRhbnQ7Cn0KLm1hcmtkb3duLWJvZHkgaDIgewogIGZvbnQtc2l6ZTogMS41ZW0gIWltcG9ydGFudDsKfQoubWFya2Rvd24tYm9keSBoMyB7CiAgZm9udC1zaXplOiAxLjI1ZW0gIWltcG9ydGFudDsKfQoubWFya2Rvd24tYm9keSBoNCB7CiAgZm9udC1zaXplOiAxLjFlbSAhaW1wb3J0YW50Owp9Ci5tYXJrZG93bi1ib2R5IGNvZGUgewogIGNvbG9yOiAjZDE0Owp9Ci5tYXJrZG93bi1ib2R5IHByZSBjb2RlIHsKICBjb2xvcjogIzMzMzsKfQo="},{"version":3,"sources":["Editormd.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Editormd.vue","sourceRoot":"src/components/common","sourcesContent":["<template>\n  <div :id=\"id\" class=\"main-editor\">\n    <textarea v-html=\"content\" style=\"display:none;\"></textarea>\n        <!-- 放大图片 -->\n        <BigImg v-if=\"showImg\" @clickit=\"showImg = false\" :imgSrc=\"imgSrc\"></BigImg>\n  </div>\n</template>\n<style src=\"@/../static/editor.md/css/editormd.min.css\"></style>\n<style src=\"@/../static/highlight/a11y-light.min.css\"></style>\n<style>\n.editormd-preview-container {\n  min-height: 60%;\n}\n.markdown-body h1 {\n  font-size: 1.8em !important;\n}\n.markdown-body h2 {\n  font-size: 1.5em !important;\n}\n.markdown-body h3 {\n  font-size: 1.25em !important;\n}\n.markdown-body h4 {\n  font-size: 1.1em !important;\n}\n.markdown-body code {\n  color: #d14;\n}\n.markdown-body pre code {\n  color: #333;\n}\n</style>\n<script>\nimport BigImg from '@/components/common/BigImg'\n\nvar $s = require('scriptjs')\nvar $ = require('jquery')\nvar hljs = require('highlight.js')\n\nexport default {\n  name: 'Editor',\n  props: {\n    width: {},\n    content: {\n      type: String,\n      default: '###初始化成功'\n    },\n    type: {\n      type: String,\n      default: 'editor'\n    },\n    keyword: {\n      type: String,\n      default: ''\n    },\n    id: {\n      type: String,\n      default: 'editor-md'\n    },\n    editorPath: {\n      type: String,\n      default: 'static/editor.md'\n    },\n    editorConfig: {\n      type: Object,\n      default () {\n        return {\n          path: 'static/editor.md/lib/',\n          height: 1000,\n          taskList: true,\n          tex: true, // 默认不解析\n          flowChart: true, // 默认不解析\n          sequenceDiagram: true, // 默认不解析\n          syncScrolling: 'single',\n          htmlDecode: 'style,script,iframe|filterXSS',\n          imageUpload: true,\n          imageFormats: ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'webp', 'JPG', 'JPEG', 'GIF', 'PNG', 'BMP', 'WEBP'],\n          imageUploadURL: DocConfig.server + '/upload',\n          onload: () => {\n            console.log('onload')\n          },\n          toolbarIcons: function () {\n            // Or return editormd.toolbarModes[name]; // full, simple, mini\n            // Using \"||\" set icons align right.\n            return [\n              'undo',\n              'redo',\n              '|',\n              'bold',\n              'del',\n              'italic',\n              'quote',\n              '|',\n              'toc',\n              'mindmap',\n              'h1',\n              'h2',\n              'h3',\n              'h4',\n              'h5',\n              'h6',\n              '|',\n              'list-ul',\n              'list-ol',\n              'hr',\n              'center',\n              '|',\n              'link',\n              'reference-link',\n              'image',\n              'video',\n              'code',\n              'code-block',\n              'table',\n              'datetime',\n              'html-entities',\n              'pagebreak',\n              '|',\n              'watch',\n              'preview',\n              'fullscreen',\n              'clear',\n              'search',\n              '|',\n              'help',\n              'info'\n            ]\n          },\n          toolbarIconsClass: {\n            toc: 'fa-bars ', // 指定一个FontAawsome的图标类\n            mindmap: 'fa-sitemap ', // 指定一个FontAawsome的图标类\n            video: 'fa-file-video-o',\n            center: 'fa-align-center'\n          },\n          // 自定义工具栏按钮的事件处理\n          toolbarHandlers: {\n            toc: function (cm, icon, cursor, selection) {\n              cm.setCursor(0, 0)\n              cm.replaceSelection('[TOC]\\r\\n\\r\\n')\n            },\n            video: function (cm, icon, cursor, selection) {\n              // 替换选中文本，如果没有选中文本，则直接插入\n              cm.replaceSelection(\n                '\\r\\n<video src=\"http://your-site.com/your.mp4\" style=\"width: 100%; height: 100%;\" controls=\"controls\"></video>\\r\\n'\n              )\n              // 如果当前没有选中的文本，将光标移到要输入的位置\n              if (selection === '') {\n                cm.setCursor(cursor.line, cursor.ch + 1)\n              }\n            },\n            mindmap: function (cm, icon, cursor, selection) {\n              // 替换选中文本，如果没有选中文本，则直接插入\n              var text = `\n\\`\\`\\`mindmap\n# 一级\n## 二级分支1\n### 三级分支1\n### 三级分支2\n## 二级分支2\n### 三级分支3\n### 三级分支4\n\\`\\`\\`\n`\n              cm.replaceSelection(text)\n              // 如果当前没有选中的文本，将光标移到要输入的位置\n              if (selection === '') {\n                cm.setCursor(cursor.line, cursor.ch + 1)\n              }\n            },\n            center: function (cm, icon, cursor, selection) {\n              // 替换选中文本，如果没有选中文本，则直接插入\n              cm.replaceSelection('<center>' + selection + '</center>')\n              // 如果当前没有选中的文本，将光标移到要输入的位置\n              if (selection === '') {\n                cm.setCursor(cursor.line, cursor.ch + 1)\n              }\n            }\n          },\n          lang: {\n            toolbar: {\n              toc: '在最开头插入TOC，自动生成标题目录',\n              mindmap: '插入思维导图',\n              video: '插入视频',\n              center: '居中'\n            }\n          },\n          onchange: () => {\n            this.deal_with_content()\n          },\n          previewCodeHighlight: false // 关闭编辑默认的代码高亮模块。用其他插件实现高亮\n        }\n      }\n    }\n  },\n  components: {\n    BigImg\n  },\n  data () {\n    return {\n      instance: null,\n      showImg: false,\n      imgSrc: ''\n    }\n  },\n  computed: {\n  },\n  mounted () {\n    // 加载依赖\"\"\n    $s([`${this.editorPath}/../jquery.min.js`,\n      `${this.editorPath}/lib/raphael.min.js`,\n      `${this.editorPath}/lib/flowchart.min.js`,\n      `${this.editorPath}/lib/d3@5.min.js`\n    ], () => {\n      $s([\n        `${this.editorPath}/../xss.min.js`,\n        `${this.editorPath}/lib/marked.min.js`,\n        `${this.editorPath}/lib/prettify.min.js`,\n        `${this.editorPath}/lib/underscore.min.js`,\n        `${this.editorPath}/lib/sequence-diagram.min.js`,\n        `${this.editorPath}/lib/jquery.flowchart.min.js`,\n        `${this.editorPath}/lib/jquery.mark.min.js`,\n        `${this.editorPath}/lib/plantuml.js?v=2`,\n        `${this.editorPath}/lib/view.min.js`,\n        `${this.editorPath}/lib/transform.min.js`\n      ], () => {\n        $s(`${this.editorPath}/editormd.js`, () => {\n          this.initEditor()\n        })\n      })\n    })\n  },\n  beforeDestroy () {\n    // 清理所有定时器\n    for (var i = 1; i < 999; i++) {\n      window.clearInterval(i)\n    }\n    // window.removeEventListener('beforeunload', e => this.beforeunloadHandler(e))\n  },\n  methods: {\n    initEditor () {\n      this.$nextTick((editorMD = window.editormd) => {\n        if (editorMD) {\n          if (this.type === 'editor') {\n            this.instance = editorMD(this.id, this.editorConfig)\n            // 草稿\n            // this.draft()\n            // window.addEventListener('beforeunload', e => this.beforeunloadHandler(e));\n          } else {\n            this.instance = editorMD.markdownToHTML(this.id, this.editorConfig)\n          }\n          this.deal_with_content()\n        }\n      })\n    },\n    // 插入数据到编辑器中。插入到光标处\n    insertValue (insertContent) {\n      this.instance.insertValue(this.html_decode(insertContent))\n    },\n    getMarkdown () {\n      return this.instance.getMarkdown()\n    },\n    editor_unwatch () {\n      return this.instance.unwatch()\n    },\n    editor_watch () {\n      return this.instance.watch()\n    },\n    clear () {\n      return this.instance.clear()\n    },\n    // 草稿\n    draft () {\n      var that = this\n      // 定时保存文本内容到localStorage\n      setInterval(() => {\n        localStorage.page_content = that.getMarkdown()\n      }, 60000)\n      // 检测是否有定时保存的内容\n      var page_content = localStorage.page_content\n      if (page_content && page_content.length > 0) {\n        localStorage.removeItem('page_content')\n        that.$confirm(that.$t('draft_tips')\n        ).then(() => {\n          that.clear()\n          that.insertValue(page_content)\n          localStorage.removeItem('page_content')\n        })\n          .catch(() => {\n            localStorage.removeItem('page_content')\n          })\n      }\n    },\n    // 关闭前提示\n    beforeunloadHandler (e) {\n      e = e || window.event\n      // 兼容IE8和Firefox 4之前的版本\n      if (e) {\n        e.returnValue = '提示'\n      }\n      // Chrome, Safari, Firefox 4+, Opera 12+ , IE 9+\n      return '提示'\n    },\n    // 对内容做些定制化改造\n    deal_with_content () {\n      var that = this\n      $s(`${this.editorPath}/../highlight/highlight.min.js`, () => {\n        hljs.highlightAll()\n      })\n      // 当表格列数过长时将自动出现滚动条\n      $.each($('#' + this.id + 'table'), function () {\n        $(this).prop('outerHTML', '<div style=\"width: 100%;overflow-x: auto;\">' + $(this).prop('outerHTML') + '</div>')\n      })\n      // 超链接都在新窗口打开\n      $('#' + this.id + ' a[href^=\"http\"]').click(function () {\n        var url = $(this).attr('href')\n        var obj = that.parseURL(url)\n        if (\n          window.location.hostname === obj.hostname &&\n          window.location.pathname === obj.pathname\n        ) {\n          window.location.href = url\n          if (obj.hash) {\n            window.location.reload()\n          }\n        } else {\n          window.open(url)\n        }\n        return false\n      })\n      // 对表格进行一些改造\n      $('#' + this.id + ' table tbody tr').each(function () {\n        var tr_this = $(this)\n        var td1 = tr_this\n          .find('td')\n          .eq(1)\n          .html()\n        var td2 = tr_this\n          .find('td')\n          .eq(2)\n          .html()\n        if (\n          td1 === 'object' ||\n          td1 === 'array[object]' ||\n          td2 === 'object' ||\n          td2 === 'array[object]'\n        ) {\n          tr_this.css({ 'background-color': '#F8F8F8' })\n        } else {\n          tr_this.css('background-color', '#fff')\n        }\n        // 设置表格hover\n        tr_this.hover(\n          function () {\n            tr_this.css('background-color', '#F8F8F8')\n          },\n          function () {\n            if (\n              td1 === 'object' ||\n              td1 === 'array[object]' ||\n              td2 === 'object' ||\n              td2 === 'array[object]'\n            ) {\n              tr_this.css({ 'background-color': '#F8F8F8' })\n            } else {\n              tr_this.css('background-color', '#fff')\n            }\n          }\n        )\n      })\n      // 获取内容总长度\n      var contentWidth = $('#' + this.id + ' p').width()\n      contentWidth = contentWidth || 722\n      // 表格列 的宽度\n      $('#' + this.id + ' table').each(function (i) {\n        var $v = $(this).get(0) // 原生dom对象\n        var num = $v.rows.item(0).cells.length // 表格的列数\n        var colWidth = Math.floor(contentWidth / num) - 2\n        if (num <= 5) {\n          $(this)\n            .find('th')\n            .css('width', colWidth.toString() + 'px')\n        }\n      })\n      // 图片点击放大\n      $('#' + this.id + ' img').click(function () {\n        var img_url = $(this).attr('src')\n        that.showImg = true\n        that.imgSrc = img_url\n      })\n      // 表格头颜色\n      $('#' + this.id + ' table thead tr').css('background-color', '#409eff')\n      $('#' + this.id + ' table thead tr').css('color', '#fff')\n      // 代码块美化\n      $('.markdown-body pre').css('background-color', '#fcfcfc')\n      $('.markdown-body pre').css('border', '1px solid #e1e1e8')\n\n      // 高亮关键字\n      if (this.keyword) $('#' + this.id).mark(this.keyword)\n    },\n    // 转义\n    html_decode (str) {\n      var s = ''\n      if (str.length === 0) return ''\n      s = str.replace(/&amp;/g, '&')\n      s = s.replace(/&lt;/g, '<')\n      s = s.replace(/&gt;/g, '>')\n      s = s.replace(/&nbsp;/g, ' ')\n      s = s.replace(/&#39;/g, \"'\")\n      s = s.replace(/&quot;/g, '\"')\n      // s = s.replace(/<br>/g, '\\n')\n      return s\n    },\n    parseURL (url) {\n      var a = document.createElement('a')\n      a.href = url\n      // var a = new URL(url);\n      return {\n        source: url,\n        protocol: a.protocol.replace(':', ''),\n        host: a.hostname,\n        hostname: a.hostname,\n        port: a.port,\n        query: a.search,\n        params: (function () {\n          // eslint-disable-next-line one-var\n          var params = {},\n            seg = a.search.replace(/^\\?/, '').split('&'),\n            len = seg.length,\n            p\n          for (var i = 0; i < len; i++) {\n            if (seg[i]) {\n              p = seg[i].split('=')\n              params[p[0]] = p[1]\n            }\n          }\n          return params\n        })(),\n        hash: a.hash.replace('#', ''),\n        // eslint-disable-next-line no-useless-escape\n        path: a.pathname.replace(/^([^\\/])/, '/$1'),\n        // eslint-disable-next-line no-useless-escape\n        pathname: a.pathname.replace(/^([^\\/])/, '/$1')\n      }\n    }\n  }\n}\n</script>\n"]}]}